(function (_, Kotlin) {
  'use strict';
  var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_287e2$;
  var lines = Kotlin.kotlin.text.lines_gw00vp$;
  var toList = Kotlin.kotlin.sequences.toList_veqyi0$;
  var StringBuilder_init = Kotlin.kotlin.text.StringBuilder_init;
  var padStart = Kotlin.kotlin.text.padStart_vrc1nu$;
  var throwCCE = Kotlin.throwCCE;
  var equals = Kotlin.equals;
  var Kind_INTERFACE = Kotlin.Kind.INTERFACE;
  var Kind_OBJECT = Kotlin.Kind.OBJECT;
  var Kind_CLASS = Kotlin.Kind.CLASS;
  var toInt = Kotlin.kotlin.text.toInt_pdl1vz$;
  var timestampRegex;
  function convertLRCV2(lrcv2, kCmd) {
    var tokens = ArrayList_init();
    var tmp$;
    tmp$ = lines(lrcv2).iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var matches = toList(timestampRegex.findAll_905azu$(element));
      if (!matches.isEmpty()) {
        if (matches.get_za3lpa$(0).range.start !== 0) {
          var endIndex = matches.get_za3lpa$(0).range.start;
          tokens.add_11rb$(new TextToken(element.substring(0, endIndex)));
        }
        var tmp$_0, tmp$_0_0;
        var index = 0;
        tmp$_0 = matches.iterator();
        while (tmp$_0.hasNext()) {
          var item = tmp$_0.next();
          var idx = (tmp$_0_0 = index, index = tmp$_0_0 + 1 | 0, tmp$_0_0);
          var values = item.groupValues;
          tokens.add_11rb$(TimeToken_init(values.get_za3lpa$(1), values.get_za3lpa$(2), values.get_za3lpa$(3)));
          if (item.range.endInclusive < (element.length - 1 | 0)) {
            var end = idx === (matches.size - 1 | 0) ? element.length : matches.get_za3lpa$(idx + 1 | 0).range.start;
            var startIndex = item.range.endInclusive + 1 | 0;
            tokens.add_11rb$(new TextToken(element.substring(startIndex, end)));
          }
        }
      }
      var element_0 = LineSeparatorToken_getInstance();
      tokens.add_11rb$(element_0);
    }
    tokens.add_wxm5ur$(0, LineSeparatorToken_getInstance());
    var processeds = processTokens(tokens);
    var $receiver = StringBuilder_init();
    $receiver.append_gw00v9$('\n[Script Info]\n; Script generated by Aegisub 3.2.2\n; http://www.aegisub.org/\nTitle: Default Aegisub file\nScriptType: v4.00+\nWrapStyle: 0\nScaledBorderAndShadow: yes\nYCbCr Matrix: None\nPlayResX: 1920\nPlayResY: 1080\n\n[V4+ Styles]\nFormat: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\nStyle: Default,Arial,70,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1\n\n[Events]\nFormat: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\n');
    var lineStartCs = {v: 0};
    var lineBuilder = {v: StringBuilder_init()};
    var tmp$_1;
    tmp$_1 = processeds.iterator();
    while (tmp$_1.hasNext()) {
      var element_1 = tmp$_1.next();
      if (Kotlin.isType(element_1, LineStartToken)) {
        lineStartCs.v = element_1.timeCs;
        lineBuilder.v = StringBuilder_init();
      }
       else if (Kotlin.isType(element_1, Syllable)) {
        lineBuilder.v.append_gw00v9$('{\\');
        lineBuilder.v.append_gw00v9$(kCmd);
        lineBuilder.v.append_s8jyv4$(element_1.endCs - element_1.startCs | 0);
        lineBuilder.v.append_s8itvh$(125);
        lineBuilder.v.append_gw00v9$(element_1.text);
      }
       else if (Kotlin.isType(element_1, LineEndToken)) {
        var start = new Date(lineStartCs.v * 10 | 0);
        var end_0 = new Date(element_1.timeCs * 10 | 0);
        var s = assFormat(start);
        var e = assFormat(end_0);
        $receiver.append_gw00v9$('Dialogue: 0,');
        $receiver.append_gw00v9$(s);
        $receiver.append_s8itvh$(44);
        $receiver.append_gw00v9$(e);
        $receiver.append_gw00v9$(',Default, ,0,0,0, ,');
        $receiver.append_gw00v9$(lineBuilder.v.toString());
        $receiver.append_s8itvh$(10);
      }
    }
    var res = $receiver.toString();
    return res;
  }
  function assFormat(date) {
    var $receiver = StringBuilder_init();
    $receiver.append_s8jyv4$(date.getUTCHours());
    $receiver.append_s8itvh$(58);
    $receiver.append_gw00v9$(padStart(date.getUTCMinutes().toString(), 2, 48));
    $receiver.append_s8itvh$(58);
    $receiver.append_gw00v9$(padStart(date.getUTCSeconds().toString(), 2, 48));
    $receiver.append_s8itvh$(46);
    $receiver.append_gw00v9$(padStart((date.getUTCMilliseconds() / 10 | 0).toString(), 2, 48));
    return $receiver.toString();
  }
  function processTokens(tokens) {
    var processeds = ArrayList_init();
    var previousLineEndToken = {v: new LineEndToken()};
    var previousLineStartToken = {v: null};
    var previousSyllable = {v: new Syllable('')};
    var previousToken = {v: previousLineEndToken.v};
    var previousTime = {v: 0};
    var tmp$;
    tmp$ = tokens.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var tmp$_0, tmp$_1, tmp$_2;
      if (equals(element, LineSeparatorToken_getInstance())) {
        if (Kotlin.isType(previousToken.v, Syllable) && (Kotlin.isType(tmp$_0 = previousToken.v, Syllable) ? tmp$_0 : throwCCE()).endCs !== 0) {
          previousLineEndToken.v = new LineEndToken((Kotlin.isType(tmp$_1 = previousToken.v, Syllable) ? tmp$_1 : throwCCE()).endCs);
        }
        previousLineEndToken.v = new LineEndToken();
        processeds.add_11rb$(previousLineEndToken.v);
        previousLineStartToken.v = new LineStartToken();
        previousToken.v = previousLineStartToken.v;
        processeds.add_11rb$(previousLineStartToken.v);
      }
       else if (Kotlin.isType(element, TimeToken)) {
        if (Kotlin.isType(previousToken.v, LineStartToken))
          (Kotlin.isType(tmp$_2 = previousToken.v, LineStartToken) ? tmp$_2 : throwCCE()).timeCs = element.time;
        if (previousLineEndToken.v.timeCs === 0)
          previousLineEndToken.v.timeCs = element.time - 1 | 0;
        if (previousSyllable.v.endCs === 0)
          previousSyllable.v.endCs = element.time - 1 | 0;
        previousTime.v = element.time;
      }
       else if (Kotlin.isType(element, TextToken)) {
        var syl = new Syllable(element.text, previousTime.v, 0);
        previousToken.v = syl;
        previousSyllable.v = syl;
        processeds.add_11rb$(syl);
      }
    }
    return processeds;
  }
  function RawToken() {
  }
  RawToken.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'RawToken',
    interfaces: []
  };
  function LineSeparatorToken() {
    LineSeparatorToken_instance = this;
  }
  LineSeparatorToken.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'LineSeparatorToken',
    interfaces: [RawToken]
  };
  var LineSeparatorToken_instance = null;
  function LineSeparatorToken_getInstance() {
    if (LineSeparatorToken_instance === null) {
      new LineSeparatorToken();
    }
    return LineSeparatorToken_instance;
  }
  function TimeToken(time) {
    this.time = time;
  }
  TimeToken.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TimeToken',
    interfaces: [RawToken]
  };
  function TimeToken_init(str1, str2, str3, $this) {
    $this = $this || Object.create(TimeToken.prototype);
    TimeToken.call($this, ((toInt(str1) * 60 | 0) * 100 | 0) + (toInt(str2) * 100 | 0) + (str3.length > 2 ? toInt(str3) / 10 | 0 : toInt(str3)) | 0);
    return $this;
  }
  TimeToken.prototype.component1 = function () {
    return this.time;
  };
  TimeToken.prototype.copy_za3lpa$ = function (time) {
    return new TimeToken(time === void 0 ? this.time : time);
  };
  TimeToken.prototype.toString = function () {
    return 'TimeToken(time=' + Kotlin.toString(this.time) + ')';
  };
  TimeToken.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.time) | 0;
    return result;
  };
  TimeToken.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.time, other.time))));
  };
  function TextToken(text) {
    this.text = text;
  }
  TextToken.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TextToken',
    interfaces: [RawToken]
  };
  TextToken.prototype.component1 = function () {
    return this.text;
  };
  TextToken.prototype.copy_61zpoe$ = function (text) {
    return new TextToken(text === void 0 ? this.text : text);
  };
  TextToken.prototype.toString = function () {
    return 'TextToken(text=' + Kotlin.toString(this.text) + ')';
  };
  TextToken.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.text) | 0;
    return result;
  };
  TextToken.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.text, other.text))));
  };
  function ProcessedToken() {
  }
  ProcessedToken.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'ProcessedToken',
    interfaces: []
  };
  function LineStartToken(timeCs) {
    if (timeCs === void 0)
      timeCs = 0;
    this.timeCs = timeCs;
  }
  LineStartToken.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LineStartToken',
    interfaces: [ProcessedToken]
  };
  LineStartToken.prototype.component1 = function () {
    return this.timeCs;
  };
  LineStartToken.prototype.copy_za3lpa$ = function (timeCs) {
    return new LineStartToken(timeCs === void 0 ? this.timeCs : timeCs);
  };
  LineStartToken.prototype.toString = function () {
    return 'LineStartToken(timeCs=' + Kotlin.toString(this.timeCs) + ')';
  };
  LineStartToken.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.timeCs) | 0;
    return result;
  };
  LineStartToken.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.timeCs, other.timeCs))));
  };
  function LineEndToken(timeCs) {
    if (timeCs === void 0)
      timeCs = 0;
    this.timeCs = timeCs;
  }
  LineEndToken.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LineEndToken',
    interfaces: [ProcessedToken]
  };
  LineEndToken.prototype.component1 = function () {
    return this.timeCs;
  };
  LineEndToken.prototype.copy_za3lpa$ = function (timeCs) {
    return new LineEndToken(timeCs === void 0 ? this.timeCs : timeCs);
  };
  LineEndToken.prototype.toString = function () {
    return 'LineEndToken(timeCs=' + Kotlin.toString(this.timeCs) + ')';
  };
  LineEndToken.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.timeCs) | 0;
    return result;
  };
  LineEndToken.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.timeCs, other.timeCs))));
  };
  function Syllable(text, startCs, endCs) {
    if (startCs === void 0)
      startCs = 0;
    if (endCs === void 0)
      endCs = 0;
    this.text = text;
    this.startCs = startCs;
    this.endCs = endCs;
  }
  Syllable.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Syllable',
    interfaces: [ProcessedToken]
  };
  Syllable.prototype.component1 = function () {
    return this.text;
  };
  Syllable.prototype.component2 = function () {
    return this.startCs;
  };
  Syllable.prototype.component3 = function () {
    return this.endCs;
  };
  Syllable.prototype.copy_3m52m6$ = function (text, startCs, endCs) {
    return new Syllable(text === void 0 ? this.text : text, startCs === void 0 ? this.startCs : startCs, endCs === void 0 ? this.endCs : endCs);
  };
  Syllable.prototype.toString = function () {
    return 'Syllable(text=' + Kotlin.toString(this.text) + (', startCs=' + Kotlin.toString(this.startCs)) + (', endCs=' + Kotlin.toString(this.endCs)) + ')';
  };
  Syllable.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.text) | 0;
    result = result * 31 + Kotlin.hashCode(this.startCs) | 0;
    result = result * 31 + Kotlin.hashCode(this.endCs) | 0;
    return result;
  };
  Syllable.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.text, other.text) && Kotlin.equals(this.startCs, other.startCs) && Kotlin.equals(this.endCs, other.endCs)))));
  };
  function Line() {
    this.builder = StringBuilder_init();
    this.startTimeCs = 0;
    this.endTimeCs = 0;
  }
  Line.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Line',
    interfaces: []
  };
  var package$ac = _.ac || (_.ac = {});
  var package$cn = package$ac.cn || (package$ac.cn = {});
  var package$origind = package$cn.origind || (package$cn.origind = {});
  var package$lrcv2toassjs = package$origind.lrcv2toassjs || (package$origind.lrcv2toassjs = {});
  package$lrcv2toassjs.convertLRCV2 = convertLRCV2;
  package$lrcv2toassjs.assFormat_qjzqsm$ = assFormat;
  package$lrcv2toassjs.RawToken = RawToken;
  Object.defineProperty(package$lrcv2toassjs, 'LineSeparatorToken', {
    get: LineSeparatorToken_getInstance
  });
  package$lrcv2toassjs.TimeToken_init_6hosri$ = TimeToken_init;
  package$lrcv2toassjs.TimeToken = TimeToken;
  package$lrcv2toassjs.TextToken = TextToken;
  package$lrcv2toassjs.ProcessedToken = ProcessedToken;
  package$lrcv2toassjs.LineStartToken = LineStartToken;
  package$lrcv2toassjs.LineEndToken = LineEndToken;
  package$lrcv2toassjs.Syllable = Syllable;
  package$lrcv2toassjs.Line = Line;
  var Regex_init = Kotlin.kotlin.text.Regex_init_61zpoe$;
  timestampRegex = Regex_init('\\[(\\d+):(\\d+)\\.(\\d+)]');
  Kotlin.defineModule('LRCv2ToASSJS', _);
  return _;
}(module.exports, require('kotlin')));

//# sourceMappingURL=LRCv2ToASSJS.js.map
